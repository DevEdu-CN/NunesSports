package com.nunessports.service;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.nunessports.exception.ResourceNotFoundException;
import com.nunessports.model.Products;
import com.nunessports.repo.ProductsRepository;

@Service
public class ProductsService {
	private final ProductsRepository productsRepository;
	
	public ProductsService(ProductsRepository productsRepository) {
		this.productsRepository = productsRepository;
	}
	
	public Products addProducts(Products products) {
		return productsRepository.save(products);
	}
	
	public Page<Products> findAllProducts(Pageable paging) {
		return productsRepository.findAll(paging);
	}
	
	public Products findProductsById(long id) {
		return productsRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException(String.format("Product with %s not found ", id)));
	}
	
	public Page<Products> findProductsByName(String name) {
		Page<Products> productsList = productsRepository.findProductsByName(name);
		
	    if (productsList.isEmpty()) {
	        throw new ResourceNotFoundException(String.format("No products found with name %s", name));
	    }

	    return productsList;
		}
	
	public List<Products> findProductsByPrice(BigDecimal lowestPrice, BigDecimal highestPrice){
		return productsRepository
				.findProductsByPriceBetween(lowestPrice, highestPrice);
	}
	
	public Products updateProducts(long id, Products updateProducts) {
	    try {
	        Products currentProducts = findProductsById(id);
	        currentProducts.setName(updateProducts.getName());
	        currentProducts.setDescription(updateProducts.getDescription());
	        currentProducts.setPrice(updateProducts.getPrice());
	        return productsRepository.save(currentProducts);
	    } catch (ResourceNotFoundException e) {
	        throw new ResourceNotFoundException(String.format("Product with ID: %s not found ", id));
	    }
	}
	
	public void deleteProducts(long id) {
		productsRepository.deleteProductsById(id)
		.orElseThrow(() -> new ResourceNotFoundException(String.format("Product with ID %s not found ", id)));;
	
	}
	
	
}
